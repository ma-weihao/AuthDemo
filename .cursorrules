This project is a combination of an node.js backend and an android app. All files under /server are part of the backend. All other files are part of the android app.


## Android Part Requirements
- Only use jetpack compose for building the UI.
- All dependencies and versions must be managed in /gradle/libs.versions.toml


## Backend Part Functions
**Each time your modification adjusts the backend functions below, please prompt for user the adjust the file .cursorrules.**
1. Server Setup:
- Created a Node.js project using Express.js
- Set up essential dependencies: express, jsonwebtoken, cors, and dotenv
- Configured environment variables for PORT (3000) and SECRET_KEY

2. Authentication Endpoints:
- /oauth/authorize (GET): OAuth authorization endpoint that:
  - Validates client_id and redirect_uri
  - Validates response_type=code
  - Shows login form for user authentication
- /oauth/authorize (POST): Login form submission that:
  - Validates user credentials
  - Generates authorization code
  - Redirects to client with code
- /oauth/token (POST): OAuth token endpoint that:
  - Validates grant_type=authorization_code
  - Validates authorization code, client_id, and redirect_uri
  - Returns JWT token with 1-hour expiration
- /api/user (GET): Protected endpoint that:
  - Requires Bearer token authentication
  - Returns user information if token is valid

3. Mock User Database:
- Implemented two test accounts:
  - demo@example.com / demo123
  - test@example.com / test123
- Each user has basic profile info (email and name)

4. Web Interface:
- Created a clean, responsive login page
- Shows app info and requested permissions
- Includes error handling and validation
- Supports OAuth authorization code flow

5. Security Features:
- CORS enabled for cross-origin requests
- JWT-based token authentication
- Bearer token scheme for API authentication
- Token expiration (1 hour)
- Authorization codes expire after 10 minutes
- One-time use authorization codes

## User Flow
1. Android App Flow:
   - User launches app
   - If not logged in, shows OAuth login button
   - Clicking login opens Chrome Custom Tab
   - After successful authorization, returns to app
   - App exchanges code for token
   - Token stored in Android Account Manager
   - User redirected to profile screen

2. OAuth Flow:
   - App requests authorization (/oauth/authorize)
   - User enters credentials in login form
   - Server validates credentials
   - Server generates authorization code
   - App receives code via redirect URI
   - App exchanges code for token (/oauth/token)
   - App uses token for API requests

3. Profile Management:
   - App shows user profile using token
   - Supports logout functionality
   - Auto-redirects to login if token invalid